android.speech.SpeechRecognizer: void stopListening()  android.permission.RECORD_AUDIO
android.speech.SpeechRecognizer: void destroy()  android.permission.RECORD_AUDIO
android.media.AudioRecord: void <init>(int,int,int,int,int)  android.permission.RECORD_AUDIO
android.speech.SpeechRecognizer: void cancel()  android.permission.RECORD_AUDIO
android.speech.SpeechRecognizer: void startListening(android.content.Intent)  android.permission.RECORD_AUDIO
android.media.MediaRecorder: void setAudioSource(int)  android.permission.RECORD_AUDIO
android.speech.SpeechRecognizer: void setRecognitionListener(android.speech.RecognitionListener)  android.permission.RECORD_AUDIO
android.provider.Telephony$Mms: android.database.Cursor query(android.content.ContentResolver,java.lang.String[])  android.permission.READ_SMS
android.provider.Telephony$Sms: android.database.Cursor query(android.content.ContentResolver,java.lang.String[])  android.permission.READ_SMS
android.provider.Telephony$Mms: android.database.Cursor query(android.content.ContentResolver,java.lang.String[],java.lang.String,java.lang.String)  android.permission.READ_SMS
android.provider.Telephony$Sms: android.database.Cursor query(android.content.ContentResolver,java.lang.String[],java.lang.String,java.lang.String)  android.permission.READ_SMS
android.accounts.AccountManager: android.accounts.AccountManagerFuture renameAccount(android.accounts.Account,java.lang.String,android.accounts.AccountManagerCallback,android.os.Handler)  android.permission.GET_ACCOUNTS
android.accounts.AccountManager: android.accounts.Account[] getAccounts()  android.permission.GET_ACCOUNTS
android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthTokenLabel(java.lang.String,java.lang.String,android.accounts.AccountManagerCallback,android.os.Handler)  android.permission.GET_ACCOUNTS
android.accounts.AccountManager: java.lang.String blockingGetAuthToken(android.accounts.Account,java.lang.String,boolean)  android.permission.GET_ACCOUNTS
android.accounts.AccountManager: android.accounts.AccountManagerFuture addAccount(java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)  android.permission.GET_ACCOUNTS
android.accounts.AccountManager: android.accounts.AccountManagerFuture editProperties(java.lang.String,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)  android.permission.GET_ACCOUNTS
android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthTokenByFeatures(java.lang.String,java.lang.String,java.lang.String[],android.app.Activity,android.os.Bundle,android.os.Bundle,android.accounts.AccountManagerCallback,android.os.Handler)  android.permission.GET_ACCOUNTS
android.accounts.AccountManager: android.accounts.Account[] getAccountsByType(java.lang.String)  android.permission.GET_ACCOUNTS
android.accounts.AccountManager: android.accounts.AccountManagerFuture removeAccount(android.accounts.Account,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)  android.permission.GET_ACCOUNTS
android.accounts.AccountManager: void addOnAccountsUpdatedListener(android.accounts.OnAccountsUpdateListener,android.os.Handler,boolean)  android.permission.GET_ACCOUNTS
android.accounts.AccountManager: android.accounts.AccountManagerFuture hasFeatures(android.accounts.Account,java.lang.String[],android.accounts.AccountManagerCallback,android.os.Handler)  android.permission.GET_ACCOUNTS
android.accounts.AccountManager: android.accounts.AccountManagerFuture updateCredentials(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)  android.permission.GET_ACCOUNTS
android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,boolean,android.accounts.AccountManagerCallback,android.os.Handler)  android.permission.GET_ACCOUNTS
android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,android.os.Bundle,boolean,android.accounts.AccountManagerCallback,android.os.Handler)  android.permission.GET_ACCOUNTS
android.accounts.AccountManager: android.accounts.AccountManagerFuture confirmCredentials(android.accounts.Account,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)  android.permission.GET_ACCOUNTS
android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)  android.permission.GET_ACCOUNTS
android.accounts.AccountManager: android.accounts.AccountManagerFuture getAccountsByTypeAndFeatures(java.lang.String,java.lang.String[],android.accounts.AccountManagerCallback,android.os.Handler)  android.permission.GET_ACCOUNTS
android.accounts.AccountManager: android.accounts.AccountManagerFuture removeAccount(android.accounts.Account,android.accounts.AccountManagerCallback,android.os.Handler) 
android.accounts.AccountManager: android.accounts.Account[] getAccountsByTypeForPackage(java.lang.String,java.lang.String)  android.permission.GET_ACCOUNTS
android.net.wifi.WifiManager: boolean reassociate()  android.permission.CHANGE_WIFI_STATE
android.net.wifi.WifiManager: boolean startScan()  android.permission.CHANGE_WIFI_STATE
android.net.wifi.WifiManager: void setCountryCode(java.lang.String,boolean)  android.permission.CHANGE_WIFI_STATE
android.net.ConnectivityManager: int startUsingNetworkFeature(int,java.lang.String)  android.permission.CHANGE_WIFI_STATE
android.net.wifi.WifiManager: boolean disableNetwork(int)  android.permission.CHANGE_WIFI_STATE
android.net.wifi.WifiManager: int updateNetwork(android.net.wifi.WifiConfiguration)  android.permission.CHANGE_WIFI_STATE
android.net.wifi.WifiManager: boolean removeNetwork(int)  android.permission.CHANGE_WIFI_STATE
android.net.wifi.WifiManager: boolean reconnect()  android.permission.CHANGE_WIFI_STATE
android.net.wifi.WifiManager: int addNetwork(android.net.wifi.WifiConfiguration)  android.permission.CHANGE_WIFI_STATE
android.net.wifi.p2p.WifiP2pManager: android.net.wifi.p2p.WifiP2pManager$Channel initialize(android.content.Context,android.os.Looper,android.net.wifi.p2p.WifiP2pManager$ChannelListener)  android.permission.CHANGE_WIFI_STATE
android.net.wifi.WifiManager: boolean enableNetwork(int,boolean)  android.permission.CHANGE_WIFI_STATE
android.net.wifi.WifiManager: boolean disconnect()  android.permission.CHANGE_WIFI_STATE
android.net.wifi.WifiManager: boolean setWifiEnabled(boolean)  android.permission.CHANGE_WIFI_STATE
android.net.ConnectivityManager: void setNetworkPreference(int)  android.permission.CHANGE_WIFI_STATE
android.net.wifi.WifiManager: boolean saveConfiguration()  android.permission.CHANGE_WIFI_STATE
android.net.ConnectivityManager: int stopUsingNetworkFeature(int,java.lang.String)  android.permission.CHANGE_WIFI_STATE
android.net.wifi.WifiManager: android.net.wifi.WifiManager$Channel initialize(android.content.Context,android.os.Looper,android.net.wifi.WifiManager$ChannelListener)  android.permission.CHANGE_WIFI_STATE
android.provider.Contacts$People: void markAsContacted(android.content.ContentResolver,long)  android.permission.WRITE_CONTACTS
android.provider.Contacts$ContactMethods: void addPostalLocation(android.content.Context,long,double,double)  android.permission.WRITE_CONTACTS
android.widget.QuickContactBadge: void assignContactFromPhone(java.lang.String,boolean)  android.permission.WRITE_CONTACTS
android.provider.ContactsContract$ProfileSyncState: byte[] get(android.content.ContentProviderClient,android.accounts.Account)  android.permission.WRITE_CONTACTS
android.provider.Contacts$People: android.database.Cursor queryGroups(android.content.ContentResolver,long)  android.permission.WRITE_CONTACTS
android.provider.ContactsContract$ProfileSyncState: android.content.ContentProviderOperation newSetOperation(android.accounts.Account,byte[])  android.permission.WRITE_CONTACTS
android.provider.ContactsContract$SyncState: void set(android.content.ContentProviderClient,android.accounts.Account,byte[])  android.permission.WRITE_CONTACTS
android.provider.ContactsContract$RawContacts: android.net.Uri getContactLookupUri(android.content.ContentResolver,android.net.Uri)  android.permission.WRITE_CONTACTS
android.provider.Contacts$People: android.net.Uri createPersonInMyContactsGroup(android.content.ContentResolver,android.content.ContentValues)  android.permission.WRITE_CONTACTS
android.provider.Contacts$People: android.net.Uri addToGroup(android.content.ContentResolver,long,java.lang.String)  android.permission.WRITE_CONTACTS
android.provider.Contacts$People: android.net.Uri addToMyContactsGroup(android.content.ContentResolver,long)  android.permission.WRITE_CONTACTS
android.provider.ContactsContract$SyncState: android.util.Pair getWithUri(android.content.ContentProviderClient,android.accounts.Account)  android.permission.WRITE_CONTACTS
android.provider.Contacts$Settings: void setSetting(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String)  android.permission.WRITE_CONTACTS
android.provider.ContactsContract$SyncState: android.content.ContentProviderOperation newSetOperation(android.accounts.Account,byte[])  android.permission.WRITE_CONTACTS
android.provider.ContactsContract$Contacts: android.net.Uri getLookupUri(android.content.ContentResolver,android.net.Uri)  android.permission.WRITE_CONTACTS
android.provider.ContactsContract$Contacts: void markAsContacted(android.content.ContentResolver,long)  android.permission.WRITE_CONTACTS
android.provider.ContactsContract$ProfileSyncState: android.util.Pair getWithUri(android.content.ContentProviderClient,android.accounts.Account)  android.permission.WRITE_CONTACTS
android.widget.QuickContactBadge: void onClick(android.view.View)  android.permission.WRITE_CONTACTS
android.provider.ContactsContract$SyncState: byte[] get(android.content.ContentProviderClient,android.accounts.Account)  android.permission.WRITE_CONTACTS
android.widget.QuickContactBadge: void assignContactFromEmail(java.lang.String,boolean)  android.permission.WRITE_CONTACTS
android.provider.ContactsContract$Contacts: android.net.Uri getLookupUri(long,java.lang.String)  android.permission.WRITE_CONTACTS
android.provider.ContactsContract$ProfileSyncState: void set(android.content.ContentProviderClient,android.accounts.Account,byte[])  android.permission.WRITE_CONTACTS
android.provider.Contacts$Settings: java.lang.String getSetting(android.content.ContentResolver,java.lang.String,java.lang.String)  android.permission.WRITE_CONTACTS
android.provider.Contacts$People: android.net.Uri addToGroup(android.content.ContentResolver,long,long)  android.permission.WRITE_CONTACTS
android.provider.ContactsContract$Directory: void notifyDirectoryChange(android.content.ContentResolver)  android.permission.WRITE_CONTACTS
android.provider.ContactsContract$Data: android.net.Uri getContactLookupUri(android.content.ContentResolver,android.net.Uri)  android.permission.WRITE_CONTACTS
android.telephony.gsm.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)  android.permission.SEND_SMS
android.telephony.SmsManager: void sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)  android.permission.SEND_SMS
android.telephony.gsm.SmsManager: void sendDataMessage(java.lang.String,java.lang.String,short,byte[],android.app.PendingIntent,android.app.PendingIntent)  android.permission.SEND_SMS
android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)  android.permission.SEND_SMS
android.telephony.gsm.SmsManager: void sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)  android.permission.SEND_SMS
android.telephony.SmsManager: void sendDataMessage(java.lang.String,java.lang.String,short,byte[],android.app.PendingIntent,android.app.PendingIntent)  android.permission.SEND_SMS
android.provider.Browser: void deleteFromHistory(android.content.ContentResolver,java.lang.String)  com.android.browser.permission.READ_HISTORY_BOOKMARKS
android.provider.Browser: void addSearchUrl(android.content.ContentResolver,java.lang.String)  com.android.browser.permission.READ_HISTORY_BOOKMARKS
android.provider.Browser: android.database.Cursor getAllVisitedUrls(android.content.ContentResolver)  com.android.browser.permission.READ_HISTORY_BOOKMARKS
android.provider.Browser: boolean canClearHistory(android.content.ContentResolver)  com.android.browser.permission.READ_HISTORY_BOOKMARKS
android.provider.Browser: void updateVisitedHistory(android.content.ContentResolver,java.lang.String,boolean)  com.android.browser.permission.READ_HISTORY_BOOKMARKS
android.provider.Browser: java.lang.String[] getVisitedHistory(android.content.ContentResolver)  com.android.browser.permission.READ_HISTORY_BOOKMARKS
android.provider.Browser: void truncateHistory(android.content.ContentResolver)  com.android.browser.permission.READ_HISTORY_BOOKMARKS
android.provider.Browser: void clearSearches(android.content.ContentResolver)  com.android.browser.permission.READ_HISTORY_BOOKMARKS
android.provider.Browser: void clearHistory(android.content.ContentResolver)  com.android.browser.permission.READ_HISTORY_BOOKMARKS
android.provider.Browser: android.database.Cursor getAllBookmarks(android.content.ContentResolver)  com.android.browser.permission.READ_HISTORY_BOOKMARKS
android.provider.Browser: void deleteHistoryTimeFrame(android.content.ContentResolver,long,long)  com.android.browser.permission.READ_HISTORY_BOOKMARKS
android.provider.CalendarContract$Instances: android.database.Cursor query(android.content.ContentResolver,java.lang.String[],long,long)  android.permission.READ_CALENDAR
android.provider.CalendarContract$CalendarAlerts: android.net.Uri insert(android.content.ContentResolver,long,long,long,long,int)  android.permission.READ_CALENDAR
android.provider.CalendarContract$EventDays: android.database.Cursor query(android.content.ContentResolver,int,int,java.lang.String[])  android.permission.READ_CALENDAR
android.provider.CalendarContract$Instances: android.database.Cursor query(android.content.ContentResolver,java.lang.String[],long,long,java.lang.String)  android.permission.READ_CALENDAR
android.provider.CalendarContract$Attendees: android.database.Cursor query(android.content.ContentResolver,long,java.lang.String[])  android.permission.READ_CALENDAR
android.provider.CalendarContract$Reminders: android.database.Cursor query(android.content.ContentResolver,long,java.lang.String[])  android.permission.READ_CALENDAR
android.media.MediaRecorder: void setVideoSource(int)  android.permission.CAMERA
android.hardware.Camera: android.hardware.Camera open()  android.permission.CAMERA
android.hardware.camera2.CameraManager: void openCamera(java.lang.String,android.hardware.camera2.CameraDevice.StateCallback,android.os.Handler)  android.permission.CAMERA
android.hardware.camera2.CameraManager: java.lang.String[] getCameraIdList()  android.permission.CAMERA
android.hardware.camera2.CameraManager: void setTorchMode(java.lang.String,boolean)  android.permission.CAMERA
android.hardware.camera2.CameraManager: void unregisterTorchCallback(android.hardware.camera2.CameraManager.AvailabilityCallback)  android.permission.CAMERA
android.hardware.camera2.CameraManager: void registerTorchCallback(android.hardware.camera2.CameraManager.AvailabilityCallback)  android.permission.CAMERA
android.hardware.camera2.CameraManager: void registerAvailabilityCallback(android.hardware.camera2.CameraManager.AvailabilityCallback,android.os.Handler)  android.permission.CAMERA
android.provider.Browser: void truncateHistory(android.content.ContentResolver)  com.android.browser.permission.WRITE_HISTORY_BOOKMARKS
android.provider.Browser: void deleteFromHistory(android.content.ContentResolver,java.lang.String)  com.android.browser.permission.WRITE_HISTORY_BOOKMARKS
android.provider.Browser: void addSearchUrl(android.content.ContentResolver,java.lang.String)  com.android.browser.permission.WRITE_HISTORY_BOOKMARKS
android.provider.Browser: void clearHistory(android.content.ContentResolver)  com.android.browser.permission.WRITE_HISTORY_BOOKMARKS
android.provider.Browser: void clearSearches(android.content.ContentResolver)  com.android.browser.permission.WRITE_HISTORY_BOOKMARKS
android.provider.Browser: void updateVisitedHistory(android.content.ContentResolver,java.lang.String,boolean)  com.android.browser.permission.WRITE_HISTORY_BOOKMARKS
android.provider.Browser: void deleteHistoryTimeFrame(android.content.ContentResolver,long,long)  com.android.browser.permission.WRITE_HISTORY_BOOKMARKS
android.provider.CalendarContract$CalendarAlerts: android.net.Uri insert(android.content.ContentResolver,long,long,long,long,int)  android.permission.WRITE_CALENDAR
android.net.sip.SipManager: android.net.sip.SipSession getSessionFor(android.content.Intent)  android.permission.USE_SIP
android.net.sip.SipManager: android.net.sip.SipAudioCall takeAudioCall(android.content.Intent,android.net.sip.SipAudioCall$Listener)  android.permission.USE_SIP
android.net.sip.SipManager: void open(android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.SipRegistrationListener)  android.permission.USE_SIP
android.net.sip.SipManager: android.net.sip.SipAudioCall makeAudioCall(android.net.sip.SipProfile,android.net.sip.SipProfile,android.net.sip.SipAudioCall$Listener,int)  android.permission.USE_SIP
android.net.sip.SipManager: void register(android.net.sip.SipProfile,int,android.net.sip.SipRegistrationListener)  android.permission.USE_SIP
android.net.sip.SipManager: boolean isOpened(java.lang.String)  android.permission.USE_SIP
android.net.sip.SipManager: boolean isRegistered(java.lang.String)  android.permission.USE_SIP
android.net.sip.SipManager: void open(android.net.sip.SipProfile)  android.permission.USE_SIP
android.net.sip.SipManager: void unregister(android.net.sip.SipProfile,android.net.sip.SipRegistrationListener)  android.permission.USE_SIP
android.net.sip.SipManager: android.net.sip.SipAudioCall makeAudioCall(java.lang.String,java.lang.String,android.net.sip.SipAudioCall$Listener,int)  android.permission.USE_SIP
android.net.sip.SipManager: void close(java.lang.String)  android.permission.USE_SIP
android.net.sip.SipManager: void setRegistrationListener(java.lang.String,android.net.sip.SipRegistrationListener)  android.permission.USE_SIP
android.net.sip.SipManager: android.net.sip.SipSession createSipSession(android.net.sip.SipProfile,android.net.sip.SipSession$Listener)  android.permission.USE_SIP
android.provider.Contacts$People: void markAsContacted(android.content.ContentResolver,long)  android.permission.READ_CONTACTS
android.provider.Contacts$ContactMethods: void addPostalLocation(android.content.Context,long,double,double)  android.permission.READ_CONTACTS
android.widget.QuickContactBadge: void assignContactFromPhone(java.lang.String,boolean)  android.permission.READ_CONTACTS
android.provider.ContactsContract$ProfileSyncState: byte[] get(android.content.ContentProviderClient,android.accounts.Account)  android.permission.READ_CONTACTS
android.provider.ContactsContract$ProfileSyncState: android.content.ContentProviderOperation newSetOperation(android.accounts.Account,byte[])  android.permission.READ_CONTACTS
android.provider.Contacts$People: android.database.Cursor queryGroups(android.content.ContentResolver,long)  android.permission.READ_CONTACTS
android.provider.ContactsContract$SyncState: void set(android.content.ContentProviderClient,android.accounts.Account,byte[])  android.permission.READ_CONTACTS
android.provider.ContactsContract$RawContacts: android.net.Uri getContactLookupUri(android.content.ContentResolver,android.net.Uri)  android.permission.READ_CONTACTS
android.provider.Contacts$People: android.net.Uri createPersonInMyContactsGroup(android.content.ContentResolver,android.content.ContentValues)  android.permission.READ_CONTACTS
android.provider.Contacts$People: android.net.Uri addToGroup(android.content.ContentResolver,long,java.lang.String)  android.permission.READ_CONTACTS
android.provider.Contacts$People: android.net.Uri addToMyContactsGroup(android.content.ContentResolver,long)  android.permission.READ_CONTACTS
android.provider.Contacts$Settings: void setSetting(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String)  android.permission.READ_CONTACTS
android.provider.ContactsContract$SyncState: android.content.ContentProviderOperation newSetOperation(android.accounts.Account,byte[])  android.permission.READ_CONTACTS
android.provider.ContactsContract$SyncState: android.util.Pair getWithUri(android.content.ContentProviderClient,android.accounts.Account)  android.permission.READ_CONTACTS
android.provider.ContactsContract$Contacts: android.net.Uri getLookupUri(android.content.ContentResolver,android.net.Uri)  android.permission.READ_CONTACTS
android.provider.ContactsContract$Contacts: void markAsContacted(android.content.ContentResolver,long)  android.permission.READ_CONTACTS
android.provider.ContactsContract$ProfileSyncState: android.util.Pair getWithUri(android.content.ContentProviderClient,android.accounts.Account)  android.permission.READ_CONTACTS
android.widget.QuickContactBadge: void onClick(android.view.View)  android.permission.READ_CONTACTS
android.provider.ContactsContract$SyncState: byte[] get(android.content.ContentProviderClient,android.accounts.Account)  android.permission.READ_CONTACTS
android.widget.QuickContactBadge: void assignContactFromEmail(java.lang.String,boolean)  android.permission.READ_CONTACTS
android.provider.ContactsContract$Contacts: android.net.Uri getLookupUri(long,java.lang.String)  android.permission.READ_CONTACTS
android.provider.ContactsContract$ProfileSyncState: void set(android.content.ContentProviderClient,android.accounts.Account,byte[])  android.permission.READ_CONTACTS
android.provider.ContactsContract$Directory: void notifyDirectoryChange(android.content.ContentResolver)  android.permission.READ_CONTACTS
android.provider.Contacts$People: android.net.Uri addToGroup(android.content.ContentResolver,long,long)  android.permission.READ_CONTACTS
android.provider.Contacts$Settings: java.lang.String getSetting(android.content.ContentResolver,java.lang.String,java.lang.String)  android.permission.READ_CONTACTS
android.provider.ContactsContract$Data: android.net.Uri getContactLookupUri(android.content.ContentResolver,android.net.Uri)  android.permission.READ_CONTACTS
android.provider.CallLog$Calls: java.lang.String getLastOutgoingCall(android.content.Context)  android.permission.READ_CALL_LOG
android.speech.SpeechRecognizer: void stopListening()  android.permission.RECORD_AUDIO
android.speech.SpeechRecognizer: void setRecognitionListener(android.speech.RecognitionListener)  android.permission.RECORD_AUDIO
android.speech.SpeechRecognizer: void cancel()  android.permission.RECORD_AUDIO
android.media.AudioRecord: void <init>(int,int,int,int,int)  android.permission.RECORD_AUDIO
android.speech.SpeechRecognizer: void startListening(android.content.Intent)  android.permission.RECORD_AUDIO
android.media.MediaRecorder: void setAudioSource(int)  android.permission.RECORD_AUDIO